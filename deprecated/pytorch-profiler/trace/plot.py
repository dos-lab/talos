
from matplotlib import pyplot as plt 
import pandas as pd
import json
import numpy as np
import sys

# from divide2 import divide_by_speedup
sys.setrecursionlimit(1000000)
names = ["alexnet", "googlenet", "inceptionv3", "resnet50", "squeezenet", "vgg19"]
names = ["squeezenet"]


def plot(model_name, split_indices):
    data = pd.read_csv("../" + model_name + "_speedup_pytorch.csv")
    speedup_records = []
    for row in data.iterrows():
        speedup_records.append({"operator": row[1]["operator"], "speedup" : row[1][" speedup"]})

    trace_file = open("./common/" + model_name + "_epoch.json", encoding="utf8")
    res = trace_file.read()
    traces = json.loads(res)

    cpu_traces = []
    gpu_traces = []

    for trace in traces:
        pid = trace["pid"]
        if pid == "CPU functions":
            cpu_traces.append(trace)
        elif pid == "CUDA functions":
            gpu_traces.append(trace)

    print(len(cpu_traces))
    print(len(gpu_traces))

    # print(cpu_trace_names)
    # print(gpu_trace_names)
    # same_op = []
    # p = min_delete(cpu_trace_names, gpu_trace_names)
    # # print(p)
    # same(p, cpu_trace_names, len(cpu_trace_names), len(gpu_trace_names), same_op)
    # print(len(same_op))

    for i, trace in enumerate(gpu_traces):
        name = trace["name"]
        pid = trace["pid"]
        ts = trace["ts"]
        speedup = -1
        for record in speedup_records:
            if  name == record["operator"] or ('/' in record["operator"] and name in record["operator"]):
                speedup = record["speedup"]
                break
        if speedup == -1:
            print(name)
        plt.bar(i, speedup)
    for s in split_indices:
            line_x = [s] * 100
            line_y = np.linspace(0,100,100)
            plt.plot(line_x, line_y, color="red", linewidth=0.2)

    plt.ylim(0,40)
    plt.title(model_name)
    plt.show()

if __name__ == "__main__":
    for name in names:
        plot(name)
    # a = [1,2,3,3,3,3,2,3,4,1]
    # b = [1,2,3,3,3,2,3,5,4,1]
    # p = min_delete(a, b)
    # print(p)
    # same(p, a, len(a), len(b))
    # print(same_op)







# import java.text.DecimalFormat;
# import java.util.ArrayList;
# import java.util.List;
# import java.util.Map;

# public class SpeedupTester {


#     public static void main(String[] args) {

#         String[] allModelNames = new String[]{"squeezenet", "alexnet", "googlenet", "bert", "resnet"};
#         Double[][] allModelCPUTimes = new Double[][]{
#                 new Double[]{40382.513000000035, 21304.403999999864, 28008.476999999955, 28095.06200000015, 26579.325999999885, 20142.891999999993, 27162.232000000076, 23826.128000000026, 21288.342999999877, 23993.163000000175, 39715.72999999998, 76877.2200000002, 25799.060999999754, 23998.533000000287, 26030.097000000067, 34192.83099999977, 31860.30299999984, 23659.943000000436, 33179.7089999998, 38124.63899999997, 33105.49300000025, 44106.051999999676, 49286.1540000001, 22059.66000000015, 99398.71099999966, 43184.57800000021, 10394.842999999877},
#                 new Double[]{34685.658999999985, 67507.73800000013, 34537.226999999955, 33530.929999999935, 25692.331000000006, 24624.62400000007, 34809.25, 40544.77799999993, 198426.73699999996, 71074.39800000004, 32484.459000000264, 25228.01199999964, 35091.35800000001, 23342.450000000186, 20459.066000000108, 27185.949000000022, 23405.827999999747, 7855.841000000015},
#                 new Double[]{87938.84400000004, 30009.804000000004, 42670.40700000012, 27225.676999999676, 112996.75400000019, 21132.424000000115, 38992.132999999914, 22902.308999999892, 38651.77199999988, 58473.58900000015, 21074.08799999999, 20455.720000000205, 53522.83599999966, 26023.733000000007, 31011.705000000075, 51281.48900000006, 20277.523000000045, 25036.487999999896, 38381.996000000276, 26392.711999999825, 36875.625, 25906.186999999918, 21020.38400000008, 27272.728999999817, 27336.169000000227, 21263.549000000115, 37942.76099999994, 29182.618999999948, 20136.330000000075, 26223.769999999553, 25012.22800000012, 21087.08700000029, 20436.955000000075, 23101.751000000164, 22581.688000000082, 21709.109999999404, 22298.93500000052, 20000.91899999976, 47951.808000000194, 20973.68499999959, 23890.68500000052, 21265.794999999925, 27908.683999999426, 21562.061000000685, 25539.45099999942, 37855.498999999836, 33926.783999999985, 20599.88000000082, 20151.73899999913, 29710.11700000055, 21100.804999999702, 20838.199000000022, 39082.47200000007, 63387.99199999962, 47980.471000000834, 25929.544999999925, 27091.85399999935, 33334.74500000011, 26317.49500000011, 102715.10699999984, 54284.10900000017, 62180.66399999987, 21649.856999999844, 20766.85300000012, 23131.9020000007, 64449.495999999344, 30030.922000000253, 64369.34700000007, 95972.51999999955, 159291.69900000002, 32811.751000000164, 100055.83100000024, 141346.10400000028, 69062.26299999934, 20642.47500000056, 20019.468999999575, 20731.735000000335, 5450.247999999672},
#                 new Double[]{25164.39699999988, 25688.61199999973, 20153.218999999575, 20175.4020000007, 20008.530999999493, 20207.82600000035, 22027.413999999873, 20252.435999999754, 21297.726000000723, 20267.528999999166, 20673.218000000343, 22226.70600000024, 20717.20099999942, 20104.02100000065, 21674.79899999965, 22178.60900000017, 20861.273000000045, 20071.18200000003, 22627.075000000186, 20148.705999999307, 25779.726000000723, 21759.213999999687, 23082.598999999464, 22075.525000000373, 27212.976999999955, 26587.81500000041, 20795.617999999784, 30830.365000000224, 26322.07599999942, 24615.809000000358, 20346.707000000402, 35408.479999999516, 31786.575000000186, 24252.26099999994, 24819.358000000007, 36888.7209999999, 33698.696999999695, 26716.01900000032, 26964.46200000029, 28485.446999999695, 26407.0, 23677.419999999925, 23472.61400000006, 22057.286000000313, 26299.233000000007, 21985.45699999947, 28794.591000000015, 20854.88599999994, 25693.305999999866, 21542.47000000067, 21496.22800000012, 30037.91299999971, 30673.222000000067, 22714.48900000006, 22466.64399999939, 20958.629000000656, 23952.441999999806, 29591.117999999784, 23350.865000000224, 20420.862999999896, 29961.058000000194, 21532.811000000685, 22532.607000000775, 20595.485999999568, 30381.572999998927, 21692.658999999985, 22931.389000000432, 20177.33100000024, 31481.270999999717, 21333.221000000834, 46471.08799999952, 36712.4570000004, 28244.708999998868, 20475.018000001088, 30050.58499999903, 64037.743000000715, 28065.18999999948, 45739.16899999976, 20197.025000000373, 29365.911000000313, 64252.4179999996, 27932.625, 43046.48500000127, 20722.648999998346, 28927.506000000983, 63488.080000000075, 29153.971999999136, 44916.07500000112, 20907.411999998614, 28777.26000000164, 43277.300999999046, 29142.46199999936, 26725.433000000194, 20394.491000000387, 23837.553999999538, 26158.783999999985, 50667.54900000058, 27605.042999999598, 48848.9299999997, 33440.333000000566, 33661.80900000036, 26299.572000000626, 60123.01499999873, 27810.05700000003, 57658.713000001386, 31064.08699999936, 33099.35099999979, 26535.526000000536, 61915.3329999987, 29060.53200000152, 57048.631999999285, 23713.335000000894, 22360.359999999404, 36167.33699999936, 63318.183000000194, 32178.911000000313, 59445.791999999434, 23734.68500000052, 20316.210999999195, 34175.71200000122, 59763.8329999987, 32693.821000000462, 49024.666999999434, 36060.158999999985, 42367.26099999994, 35302.40100000054, 65221.29900000058, 32333.07399999909, 62267.406000001356, 36212.944000000134, 31726.645999999717, 35684.438999999315, 66777.2620000001, 34334.191999999806, 60318.00200000033, 35940.61199999973, 36147.34200000018, 33249.78099999949, 26597.982000000775, 53608.99799999967},
#                 new Double[]{71901.1919999998, 49006.139999999665, 56654.007000000216, 24598.42100000009, 51667.83600000013, 65760.49500000011, 32386.683999999426, 54099.94900000002, 27082.822000000626, 33553.02799999993, 42966.310999999754, 38848.338000000454, 58804.40499999933, 24728.366000000387, 20524.894999999553, 36840.27400000021, 38568.81500000041, 57913.02799999993, 25265.202999999747, 21164.286000000313, 53122.10699999984, 68005.13800000027, 38416.52499999944, 83658.83800000045, 22656.57899999991, 41724.20199999958, 38364.42100000009, 37586.39400000032, 21202.216000000015, 33146.65500000026, 41498.53799999878, 38145.07800000161, 20861.87199999951, 33055.99799999967, 38752.85899999924, 34470.6090000011, 20284.843000000343, 37465.11400000006, 35381.72499999963, 24678.08699999936, 56873.99799999967, 38792.41899999976, 32413.680000001565, 24250.10300000012, 38773.797999998555, 32208.60300000012, 24003.019999999553, 37110.42000000179, 31994.81299999915, 24535.373999999836, 35601.512000000104, 31049.58699999936, 24773.330000000075, 35175.35000000149, 33119.81199999899, 25264.5, 49411.30700000003, 39444.015000000596, 20064.292999999598, 63501.091000000015, 27000.985999999568, 30455.847000001, 26343.041999999434, 20603.936000000685, 30671.3479999993, 20251.14399999939, 20941.403000000864, 47063.25899999961, 104980.43600000069, 42024.093999998644, 104827.63200000115, 79259.3479999993, 204169.813000001, 56452.04899999872, 129399.56000000052, 57275.778000000864, 136104.51799999923, 59842.197000000626, 133747.52199999988, 61340.29600000009, 137599.5309999995, 61625.75499999896, 139180.31700000167, 120021.75699999928, 317087.6980000008, 25573.664999999106, 236760.37099999934, 25781.213000001386, 249441.26499999873, 20013.95600000024, 192046.1490000002, 25536.5, 622297.6870000008, 49919.24499999918, 407496.3300000001, 52141.68500000052, 429343.0639999993, 50784.466000000015, 710560.602, 20610.591000000015, 20427.01899999939, 20367.593000000343, 20110.64100000076, 20890.474999999627, 20810.06499999948, 3643.731000000611},
#         };
#         Double[][] allModelGPUTimes = new Double[][]{
#                 new Double[]{2757.625, 2643.0, 5516.5, 2986.0, 5487.375, 2054.0, 5893.75, 6076.75, 5759.125, 5713.875, 5529.75, 13213.5, 5308.125, 5374.125, 6984.0, 9723.375, 4602.0, 6104.875, 8153.5, 12137.75, 4720.5, 4245.5, 13644.75, 2682.875, 18910.375, 4295.5, 8430.125},
#                 new Double[]{14400.625, 4012.25, 3300.625, 3722.0, 2488.375, 3266.5, 4197.625, 4467.5, 21196.625, 7132.375, 7831.625, 4958.375, 4289.25, 2498.5, 2487.625, 3306.25, 2303.875, 1628.25},
#                 new Double[]{3887.375, 2742.75, 3378.875, 1411.125, 6564.125, 2153.625, 2560.875, 1517.5, 2000.0, 3108.875, 1741.75, 1456.0, 2877.5, 2562.125, 1621.0, 3419.0, 1818.0, 2058.0, 3238.875, 2192.375, 3127.625, 2251.5, 2108.375, 1478.875, 2016.0, 1751.0, 2766.125, 2696.0, 2025.375, 2731.5, 2433.625, 2735.875, 3473.25, 2596.375, 3675.0, 3206.625, 3553.75, 3166.125, 5549.875, 2809.875, 3359.0, 3745.25, 2747.0, 2426.875, 4233.25, 4198.125, 3576.0, 2635.0, 2345.5, 3594.5, 2446.25, 2296.875, 3856.0, 7016.25, 2148.25, 2525.875, 2619.375, 2223.25, 1366.875, 4559.0, 3782.5, 3862.625, 1503.125, 3083.875, 1699.625, 4712.25, 2919.25, 7419.375, 5259.25, 15948.375, 1775.125, 8346.125, 6998.0, 7967.75, 18584.5, 16635.875, 5943.5, 3043.5},
#                 new Double[]{3904.875, 3120.0, 1935.125, 2308.375, 2330.5, 1523.25, 1995.25, 6035.5, 3872.0, 2484.625, 3934.0, 4459.125, 3817.375, 1846.5, 3518.625, 3938.375, 2619.875, 2654.125, 4761.75, 10097.875, 12101.75, 3078.875, 3563.25, 1560.375, 2101.125, 2236.5, 1350.125, 2719.75, 2101.25, 2236.125, 1452.375, 2747.375, 2280.375, 1648.75, 2041.5, 2928.875, 2281.375, 2278.875, 2209.625, 2171.75, 2557.0, 2851.625, 2910.25, 2059.875, 2621.125, 2856.875, 2911.125, 2076.625, 2731.5, 3628.75, 2024.25, 2655.375, 2447.875, 2242.25, 1949.75, 1822.75, 2153.125, 2737.625, 2959.875, 1638.375, 3509.875, 2730.375, 2965.625, 1638.25, 3493.875, 2726.0, 2965.125, 1637.75, 3513.25, 2731.375, 7853.875, 467.875, 4188.125, 2667.75, 3408.125, 5978.75, 578.625, 3865.375, 2276.5, 3576.125, 5765.25, 577.625, 3852.75, 2271.25, 3571.625, 5761.0, 577.5, 3850.375, 2270.75, 3602.75, 5884.125, 580.875, 3950.625, 3162.0, 1332.0, 2892.75, 4432.875, 469.0, 4071.375, 1810.5, 2676.75, 2889.75, 4409.125, 466.5, 3975.5, 1781.75, 2638.125, 2833.75, 4336.25, 467.0, 3977.125, 1781.375, 2641.5, 2842.75, 4335.375, 468.0, 3978.875, 1785.25, 2656.75, 2894.25, 4426.75, 472.125, 4066.875, 1810.75, 2674.75, 2889.75, 4423.75, 466.875, 4067.375, 1811.375, 2673.75, 2893.0, 4407.125, 467.875, 3979.25, 1785.625, 2637.375, 2841.25, 1351.625, 1974.375},
#                 new Double[]{2761.75, 2779.125, 3381.0, 608.5, 4136.25, 3287.25, 2855.25, 1998.75, 2853.125, 4335.75, 1230.75, 4128.625, 3270.875, 2844.625, 4286.5, 1255.5, 4124.625, 3289.0, 2848.75, 4268.0, 2519.125, 9123.5, 2274.75, 4594.5, 2823.375, 2327.0, 2617.75, 2353.125, 2841.75, 2326.75, 2615.875, 2356.75, 2830.125, 2325.25, 2607.25, 2357.125, 2846.375, 3610.875, 4327.5, 1978.0, 4094.375, 3418.125, 2115.5, 1982.375, 3425.875, 2108.0, 2023.125, 3446.375, 2160.75, 2009.625, 3453.0, 2135.875, 2017.5, 3440.125, 2142.625, 2008.5, 4683.5, 4324.25, 1832.875, 3913.0, 2527.375, 1911.375, 2281.5, 2017.375, 1918.375, 1777.375, 2249.5, 5140.375, 8448.0, 4556.5, 8466.75, 11264.125, 24721.5, 5119.75, 10336.5, 5533.75, 10045.25, 5328.75, 9980.0, 5134.0, 9734.5, 5150.75, 9702.75, 11049.5, 26791.25, 2302.75, 15933.5, 2297.75, 15931.5, 2326.5, 15814.25, 2303.75, 45187.75, 4548.75, 27287.25, 4530.25, 26965.5, 4526.75, 48271.0, 13107.5, 6682.5, 3840.0, 5823.75, 4254.0, 3693.0, 725.25},
#         };

#         List<String> labels = new ArrayList<String>();

#         for(int i = 0; i < allModelCPUTimes.length; i++) {
#             for(int j = 0; j < i; j++) {
#                 // j应该放到cpu上
#                 // i应该放到gpu上
#                 DataReader dr = new DataReader(
#                         allModelGPUTimes[i],
#                         allModelCPUTimes[i],
#                         allModelGPUTimes[j],
#                         allModelCPUTimes[j]
#                 );

#                 SpeedupResolver sr = new SpeedupResolver(dr);
#                 sr.resolve();
# //                System.out.println("old runtime :"+ sr.getOldRuntime());
# //                System.out.println("new runtime :"+ sr.getNewTaskstime());
#                 DecimalFormat df = new DecimalFormat("00.00%");
#                 labels.add("\"" + allModelNames[i] + "\\n + \\n" + allModelNames[j] + "\"");

#                 System.out.println(allModelNames[i] + " on gpu and " + allModelNames[j] + " on cpu ");
#                 System.out.println("Improve percentage:" + df.format((sr.getOldRuntime()-sr.getNewTaskstime())/sr.getOldRuntime()));
#                 System.out.println("Improve percentage2:" + df.format((dr.getOldAllGPUtime()-sr.getNewTaskstime())/dr.getOldAllGPUtime()));
#                 System.out.println("Improve percentage3:" + df.format((dr.getTotalImmigrationTime()-sr.getNewTaskstime())/dr.getTotalImmigrationTime()));

#                 System.out.println("all time: " + sr.getOldRuntime());

#                 System.out.println("1 " + df.format(dr.getOldAllGPUtime() / sr.getOldRuntime()));
#                 System.out.println("2 " + df.format(dr.getTotalImmigrationTime() / sr.getOldRuntime()));

#                 System.out.println("3 " + df.format(sr.getNewTaskstime() / sr.getOldRuntime()));
#                 int cpuToGpuCount = 0;
#                 int gpuToCpuCount = 0;
#                 double waitTime = 0;

#                 for(Span span : sr.getNewCPUOperations()) {
#                     if(span.sType.equals("cpu-gpu")) {
#                         cpuToGpuCount++;
#                     }
#                     if(span.sType.equals("gpu-cpu")) {
#                         gpuToCpuCount++;
#                     }
#                     if(span.sType.equals("blank")) {
#                         waitTime += span.duration;
#                     }
#                 }

#                 for(Span span : sr.getNewGPUOperations()) {
#                     if(span.sType.equals("cpu-gpu")) {
#                         cpuToGpuCount++;
#                     }
#                     if(span.sType.equals("gpu-cpu")) {
#                         gpuToCpuCount++;
#                     }
#                     if(span.sType.equals("blank")) {
#                         waitTime += span.duration;
#                     }
#                 }

#                 System.out.println("cpu to gpu: " + cpuToGpuCount);
#                 System.out.println("gpu to cpu: " + gpuToCpuCount);
#                 System.out.println("wait time: " + waitTime);
#                 System.out.println();
#             }
#         }
#         System.out.println(labels);

#     }
# }
